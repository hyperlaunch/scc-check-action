name: "SCC Code Report"
description: "Runs SCC to generate a code metrics report and create a GitHub check"

inputs:
  github-token:
    description: "GitHub token for API requests"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install and Run SCC
      shell: bash
      run: |
        go install github.com/boyter/scc/v3@latest
        $(go env GOPATH)/bin/scc > scc_output.txt

    - name: Create check output
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require("node:fs");

          const sccOutput = fs.readFileSync("scc_output.txt", "utf8");

          const lines = sccOutput.split("\n");
          const startIndex = lines.findIndex((line) => line.includes("Language"));
          const endIndex = lines.findIndex((line) => line.includes("Total"));

          let metrics = "";
          metrics +=
            "| Language | Files | Lines | Code | Comment | Blank | Complexity |\n";
          metrics +=
            "|----------|-------|-------|------|---------|-------|------------|\n";

          for (let i = startIndex + 1; i <= endIndex; i++) {
            const line = lines[i].trim();
            if (line && !/^[\u2500-\u257F\s]+$/.test(line)) {
              const cells = line.split(/\s+/);
              metrics += `| ${cells.join(" | ")} |\n`;
            }
          }

          const metricsStartIndex = lines.findIndex((line) =>
            line.includes("Estimated Cost to Develop"),
          );

          let result = "";

          if (metricsStartIndex !== -1) {
            const costLines = lines.slice(metricsStartIndex, metricsStartIndex + 3);
            result += "\n| Metric | Value |\n|--------|-------|\n";

            for (const line of costLines) {
              const match = line.trim().match(/(.*?)(\$?\d[\d.,]*)\s*(\w.*)?$/);

              if (match) {
                const label = match[1].trim();
                const number = match[2].trim();
                const unit = match[3] ? ` ${match[3].trim()}` : "";
                result += `| ${label} | ${number}${unit} |\n`;
              } else {
                result += `| ${line.trim()} |  |\n`;
              }
            }
          }

          result += `\n\n${metrics}`;

          await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: "SCC Code Report",
            head_sha: context.sha,
            status: "completed",
            conclusion: "success",
            output: {
              title: "SCC Code Report",
              summary: result,
            },
          });
